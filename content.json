{"meta":{"title":"懂点技术，学点营销，挣点小钱","subtitle":"","description":"","author":"xiaoli","url":"http://yoursite.com"},"pages":[{"title":"分类","date":"2020-07-15T13:55:46.000Z","updated":"2020-07-15T13:56:43.967Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-07-15T14:00:06.000Z","updated":"2020-07-15T14:00:48.505Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"进程管理","slug":"os2","date":"2020-07-18T07:52:09.851Z","updated":"2020-07-18T07:52:09.851Z","comments":true,"path":"2020/07/18/os2/","link":"","permalink":"http://yoursite.com/2020/07/18/os2/","excerpt":"","text":"首先我们需要明确 2个概念1、进程是系统进行资源分配 和调度的基本单位2、线程是操作系统进行运行调度的最小单位 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为多道程序设计的概念，操作系统能同时处理多个任务，那么这些不同的任务是如何执行起来的呢？操作系统会把任务分配给不同的进程，进程中包含程序执行需要的资源 如文件资源，处理器资源。然后进程是包含程序资源 执行等一个载体，进程调度 里面的线程进行程序执行。 所以 “真正执行任务是进程里面的线程，进程是操作系统进行资源分配和调度等基本单位” 那么一个进程实体包含哪些东西呢？系统中存放进程的管理和控制信息的数据结构称为进程控制块（PCB Process Control Block）PCB一般包括： 1、程序ID，进程的唯一标识 2、特征信息：一般分系统进程、用户进程、或者内核进程等 3、进程状态：运行、就绪、阻塞，表示进程现的运行情况 4、优先级：表示获得CPU控制权的优先级大小 5、通信信息：进程之间的通信关系的反映，由于操作系统会提供通信信道 6、现场保护区：保护阻塞的进程用 7、资源需求、分配控制信息 8、进程实体信息，指明程序路径和名称，进程数据在物理内存还是在交换分区（分页）中 进程常见的几种状态 进程的同步 由于资源是有限的，为避免竞争条件，操作系统需要利用同步机制在并发执行时，保证对临界区的互斥访问。进程同步的解决方案主要有：信号量和管程。 对于同步机制，需要遵循以下四个规则： 空闲则入：没有进程在临界区时，任何进程可以进入； 忙则等待：有进程在临界区时，其他进程均不能进入临界区； 有限等待：等待进入临界区的进程不能无限期等待； 让权等待（可选）：不能进入临界区的进程，应该释放 CPU，如转换到阻塞态； 信号量信号量机制（semaphore）是一种协调共享资源访问的方法。信号量由一个变量 semaphore 和两个原子操作组成，信号量只能通过 P 和 V 操作来完成，而且 P和 V 操作都是原子操作。 将信号量表示如下： 1234typedef struct &#123; int value; struct process_control_block *list;&#125; semaphore; 相应的 P(wait) 操作和 V(signal) 操作如下实现： 123456789101112wait(semaphore *S) &#123; S-&gt;value--; if(S-&gt;value &lt; 0) &#123; block(S-&gt;list); &#125;&#125;signal(semaphore *S) &#123; S-&gt;value++; if(S-&gt;value &lt;&#x3D; 0) &#123; wakeup(S-&gt;list); &#125;&#125; 复制代码信号量可分为两类：互斥信号量，信号量大小为为 0 或 1，用来实现进程的互斥访问；资源信号量，信号量大小为资源数，用来表示系统资源数目。 资源信号量代表资源信号量时，S-&gt;value 初值表示系统资源的数目，P 操作意味着进程请求一个资源，于是系统中可分配的资源数减一，如果 S-&gt;value &lt; 0，表示该类资源已分配完毕，因此阻塞该进程，并插入信号量链表 S-&gt;list 中。小于 0 时，S-&gt;value 的绝对值表示该信号量链表中阻塞的进程数。 V 操作表示进程释放一个资源，于是系统中可分配的资源数加一，如果增加一后仍然 S-&gt;value &lt;= 0，表示该信号量链表中仍然有阻塞的进程，因此调用 wakeup，将 S-&gt;list 中的第一个进程唤醒。 互斥信号量代表互斥信号量时，S-&gt;value 初值为 1，表示只允许一个进程访问该资源。 利用信号量实现两个进程互斥描述如下： 123456semaphore mutex &#x3D; 1;P() &#123; wait(mutex); 临界区； signal(mutex);&#125; 当 mutex = 1 时，表示两个进程都没有进入临界区，当 mutex = 0 时，表示一个进程进入临界区运行；当 mutex = -1 时，表示一个进程进入临界区运行，另一个进程被阻塞在信号量队列中。 管程管程采用面向对象思想，将表示共享资源的数据结构及相关的操作，包括同步机制，都集中并封装到一起。所有进程都只能通过管程间接访问临界资源，而管程只允许一个进程进入并执行操作，从而实现进程互斥。 12345678910111213Monitor monitor_name &#123; share variable declarations; condition declarations; public: void P1(···) &#123; ··· &#125; &#123; initialization code; &#125;&#125; 管程中设置了多个条件变量，表示多个进程被阻塞或挂起的条件，条件变量的形式为 condition x, y;，它也是一种抽象数据类型，每个变量保存了一条链表，记录因该条件而阻塞的进程，与条件变量相关的两个操作：condition.cwait 和 condition.csignal。 condition.cwait：正在调用管程的进程因 condition 条件需要被阻塞，则调用 condition.cwait 将自己插入到 condition 的等待队列中，并释放管程。此时其他进程可以使用该管程。 condition.csignal：正在调用管程的进程发现 condition 条件发生变化，则调用 condition.csignal 唤醒一个因 condition 条件而阻塞的进程。如果没有阻塞的进程，则不产生任何结果。进程间通讯到方式1）管道2）共享内存3）消息队列4）Socket","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"keywords":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"操作系统","slug":"os01","date":"2020-07-18T07:27:40.528Z","updated":"2020-07-18T07:27:40.528Z","comments":true,"path":"2020/07/18/os01/","link":"","permalink":"http://yoursite.com/2020/07/18/os01/","excerpt":"","text":"操作系统为什么需要操作系统？操作系统应该是和我们的生活息息相关了，比如手机党 经常使用的 安卓和 iOS，像我们这种资(zha)深(zha) 程序员每天使用的 mac 和 windows ，那么 不使用操作系统行不行呢？当然可以 只需要把 需要执行的 指令通过 机器指令 转化为 微程序，在转换为相应的微指令 发送给 cpu执行就行。 不信，你试试，反正我就不试了，还是抱紧操作系统的大腿吧。 操作系统提供了哪些功能？根据冯诺伊曼体系（把程序存储起来，设计通用电路）的思想，现在计算机仍然使用冯诺伊曼体系。计算机包含 cpu、内存、硬盘、输入设备、输出设备，操作系统的主要作用是向下管理这些资源，向上面向用户 提供图形化的操作界面或者终端调用。 操作系统统一管理着计算机资源（处理器资源，存储资源，IO资源，文件资源） 用户无需面向硬件接口编程，操作系统会把这些资源封装成逻辑层，给应用程序提供相应的函数调用 给用户提供操作的界面或终端。 操作系统具有哪些特性： 并发性1并发性指的是操作系统可以在同一段时间内同时做很多事情，是不是很棒棒，对于单核cpu就是通过进程快速切换来实现的并发，而对于 多核cpu, 可以在同一时刻处理任务，这就是所谓的并行。 共享性1共享性 指同一块内存或者硬盘，既可以同时被程序A所使用，也能同时被程序B所使用。有点像今天的 共享单车。当然正在使用的一块区域是不能被拿来被别的程序占用的，即所谓的互斥性。 虚拟性12硬盘上一块硬盘可以被划分成c盘 d盘 e盘不同盘符上的文件损坏 互相不受干扰以及虚拟内存技术 异步性1在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底。而是走走停停，以不可预知的速度向前推进。","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"keywords":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]}]}